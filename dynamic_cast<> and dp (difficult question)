#include <iostream>
#include <vector>
#include <string>
using namespace std;

class Spell { 
    private:
        string scrollName;
    public:
        Spell(): scrollName("") { }
        Spell(string name): scrollName(name) { }
        virtual ~Spell() { }
        string revealScrollName() {
            return scrollName;
        }
};

class Fireball : public Spell { 
    private: int power;
    public:
        Fireball(int power): power(power) { }
        void revealFirepower(){
            cout << "Fireball: " << power << endl;
        }
};

class Frostbite : public Spell {
    private: int power;
    public:
        Frostbite(int power): power(power) { }
        void revealFrostpower(){
            cout << "Frostbite: " << power << endl;
        }
};

class Thunderstorm : public Spell { 
    private: int power;
    public:
        Thunderstorm(int power): power(power) { }
        void revealThunderpower(){
            cout << "Thunderstorm: " << power << endl;
        }
};

class Waterbolt : public Spell { 
    private: int power;
    public:
        Waterbolt(int power): power(power) { }
        void revealWaterpower(){
            cout << "Waterbolt: " << power << endl;
        }
};

class SpellJournal {
    public:
        static string journal;
        static string read() {
            return journal;
        }
}; 
string SpellJournal::journal = "";

void counterspell(Spell *spell) {
    
    Fireball* fire = dynamic_cast<Fireball*>( spell );
    if( fire!=NULL ){ 
        
        fire->revealFirepower(); 
        return; 
    }

    Frostbite* frost = dynamic_cast<Frostbite*>( spell );
    if( frost!=NULL ){ 
        
        frost->revealFrostpower(); 
        return; 
    }
        
    Thunderstorm* thunder = dynamic_cast<Thunderstorm*>( spell );
    if( thunder!=NULL ){ 
            
        thunder->revealThunderpower(); 
        return; 
    }

    Waterbolt* water = dynamic_cast<Waterbolt*>( spell );
    if( water!=NULL ){ 
        water->revealWaterpower(); 
        return; 
    }
        
    string s=spell->revealScrollName(), t=SpellJournal::read();
    unsigned m = s.size(), n = t.size();
    vector<vector<unsigned>> dp( 1+m, vector<unsigned>(1+n, 0) );
        
    for( unsigned i = 1; i <= m; i++ ){
            
        for( unsigned j = 1; j <= n ; j++ ){
            dp[i][j] = s[i-1]==t[j-1] ? 1+dp[i-1][j-1] : max(dp[i][j-1],dp[i-1][j]);
        }
    }
    cout << dp[m][n] << endl;

}

class Wizard {
    public:
        Spell *cast() {
            Spell *spell;
            string s; cin >> s;
            int power; cin >> power;
            if(s == "fire") {
                spell = new Fireball(power);
            }
            else if(s == "frost") {
                spell = new Frostbite(power);
            }
            else if(s == "water") {
                spell = new Waterbolt(power);
            }
            else if(s == "thunder") {
                spell = new Thunderstorm(power);
            } 
            else {
                spell = new Spell(s);
                cin >> SpellJournal::journal;
            }
            return spell;
        }
};

int main() {
    int T;
    cin >> T;
    Wizard Arawn;
    while(T--) {
        Spell *spell = Arawn.cast();
        counterspell(spell);
    }
    return 0;
}
