#include <iostream>
using namespace std;
static int prof_cur_id = 1, student_cur_id = 1; // static global variables for id allocations

//base classs
class Person { 
  protected:
    int age;
    string name;
  public:
    virtual void getdata() = 0;//pure virtual function
    virtual void putdata() = 0;//pure virtual function   
};

class Professor: public Person{
    private:
        int cur_id, publications;
    public:
        void getdata() override{
            cin>>name>>age>>publications;
            cur_id = prof_cur_id;
            prof_cur_id++;
        }    
        void putdata() override{
            cout<<name<<" "<<age<<" "<<publications<<" "<<cur_id<<endl;
        }
};

class Student: public Person{
    private:
        int cur_id, sum = 0;
    public:
        void getdata() override{
            cin>>name>>age;
            for(int i = 0; i<6; i++){
                int inp;cin>>inp;
                sum+=inp;
            }
            cur_id = student_cur_id;
            student_cur_id++;
        }    
        void putdata() override{
            cout<<name<<" "<<age<<" "<<sum<<" "<<cur_id<<endl;
        }
};

int main(){

    int n, val;
    cin>>n; //The number of objects that is going to be created.
    Person *per[n];

    for(int i = 0;i < n;i++){

        cin>>val;
        if(val == 1){
            // If val is 1 current object is of type Professor
            per[i] = new Professor;

        }
        else per[i] = new Student; // Else the current object is of type Student

        per[i]->getdata(); // Get the data from the user.

    }

    for(int i=0;i<n;i++)
        per[i]->putdata(); // Print the required output for each object.

    return 0;

}
